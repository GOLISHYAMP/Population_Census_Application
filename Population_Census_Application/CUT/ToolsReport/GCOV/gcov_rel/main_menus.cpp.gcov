        -:    0:Source:main_menus.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:#include<iostream>
        -:    2:#include<string>
        -:    3:#include<thread>
        -:    4:#include "authenticate_functions.cpp"
        -:    5:#include "zone_rel.cpp"
        -:    6:#include "central_rel.cpp"
        -:    7:using namespace std;
        -:    8:
function _Z31Dynaland_Zone_Wise_Registrationv called 1 returned 100% blocks executed 33%
        1:    9:void Dynaland_Zone_Wise_Registration()
        -:   10:{
        1:   11:	system("clear");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:   12:	//	int (*p[3])() = {Zone_1_Citizen_Register, Zone_2_Citizen_Register, Zone_3_Citizen_Register};
        1:   13:	string ch = "a";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        3:   14:	while(ch != "4")
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2
branch  4 taken 1 (fallthrough)
        -:   15:	{
        2:   16:		cout<<endl<<endl<<"---------  Please select the Zone of Citizen Registration ----------"<<endl<<endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:   17:		cout<<endl<<"1. Zone 1 citizen registration"<<endl<<"2. Zone 2 citizen registration"<<endl<<"3. Zone 3 citizen registration"<<endl<<"4. <-Back to Main Menu"<<endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 2
branch 19 taken 2 (fallthrough)
branch 20 taken 0 (throw)
call   21 returned 2
branch 22 taken 2 (fallthrough)
branch 23 taken 0 (throw)
call   24 returned 2
branch 25 taken 2 (fallthrough)
branch 26 taken 0 (throw)
        -:   18:
        2:   19:		cin.clear();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   20:		cin.sync();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:   21:		getline(cin,ch);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   22:
        -:   23:		try
        -:   24:		{
        2:   25:			if(ch.length() != 1)
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:   26:			{
    #####:   27:				throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   28:			}
        -:   29:		}
    =====:   30:		catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:   31:		{
    =====:   32:			cout<<"Enter a single digit only"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   33:			system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   34:			system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   35:			continue;
    =====:   36:		}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   37:		try
        -:   38:		{
        2:   39:			if(isblank(ch[0]))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        -:   40:			{
    #####:   41:				throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   42:			}
        -:   43:		}
    =====:   44:		catch(string b)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:   45:		{
    =====:   46:			cout<<"choice cannot be blank"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   47:			system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   48:			system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:   49:			continue;
    =====:   50:		}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   51:
        -:   52:		try
        -:   53:		{
        2:   54:			if(isalpha(ch[0]))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        -:   55:			{
    #####:   56:				throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   57:			}
        -:   58:
        -:   59:			/*
        -:   60:			   if(stoi(ch)<1 || stoi(ch)>4)
        -:   61:			   {
        -:   62:			   cout<<"Invalid Input"<<endl;
        -:   63:			   }
        -:   64:			   else
        -:   65:			   {
        -:   66:			   if(stoi(ch) == 4)
        -:   67:			   {	
        -:   68:			   break;
        -:   69:			   }}
        -:   70:			//	p[stoi(ch)-1]();     // function call;
        -:   71:
        -:   72:			thread th(&p[stoi(ch)-1],NULL);
        -:   73:			th.join();
        -:   74:			string temp;
        -:   75:			getline(cin,temp);
        -:   76:			*/
        2:   77:			switch(ch[0])
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
        -:   78:			{
        1:   79:				case '1' : {thread th1(Zone_1_Citizen_Register);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:   80:					   th1.join();}
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 never executed
        1:   81:					   break;
    #####:   82:				case '2' : {thread th2(Zone_2_Citizen_Register);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   83:					   th2.join();}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   84:					   break;
    #####:   85:				case '3' : {thread th3(Zone_3_Citizen_Register);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   86:					   th3.join();}
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
call    4 never executed
    #####:   87:					   break;
        1:   88:				case '4' : break;
    #####:   89:				default: cout<<"Invalid Input"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:   90:
        -:   91:			}
        4:   92:			string temp;
call    0 returned 2
call    1 returned 2
call    2 never executed
        2:   93:			getline(cin,temp);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   94:		}	
        -:   95:		
    =====:   96:		catch(string ch)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:   97:		{
    =====:   98:			cout<<"Invalid Input! (Only numbers are allowed)"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   99:		}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  100:	}
        -:  101:
        1:  102:	system("clear");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  103:}
call    0 returned 1
call    1 never executed
        -:  104:
        -:  105:int login_page();
        -:  106:
function _Z31Dynaland_Central_Representativev called 1 returned 100% blocks executed 40%
        1:  107:void Dynaland_Central_Representative()
        -:  108:{
        -:  109:		//system("clear");
        -:  110:
        -:  111:	
        1:  112:	if(login_page() == 1)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  113:	{
        1:  114:		system("clear");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  115:		string temp;
call    0 returned 1
        1:  116:		cin.clear();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  117:		getline(cin,temp);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  118:	
        1:  119:		int (*p[4])() = {Change_id_password,Data_Maintainance, Reports, Queries};
        1:  120:		string ch = "a";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        2:  121:		while(ch != "5")
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2
branch  4 taken 0 (fallthrough)
        -:  122:		{
        2:  123:			cout<<endl<<endl<<"---------  select the Option ----------"<<endl<<endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
        2:  124:			cout<<endl<<"1. Change admin ID or password"<<endl<<"2. Data Maintainance"<<endl<<"3. Reports"<<endl<<"4. Queries"<<endl<<"5. <-Back to Main Menu"<<endl;
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 2
branch 10 taken 2 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 2
branch 13 taken 2 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 2
branch 16 taken 2 (fallthrough)
branch 17 taken 0 (throw)
call   18 returned 2
branch 19 taken 2 (fallthrough)
branch 20 taken 0 (throw)
call   21 returned 2
branch 22 taken 2 (fallthrough)
branch 23 taken 0 (throw)
call   24 returned 2
branch 25 taken 2 (fallthrough)
branch 26 taken 0 (throw)
call   27 returned 2
branch 28 taken 2 (fallthrough)
branch 29 taken 0 (throw)
call   30 returned 2
branch 31 taken 2 (fallthrough)
branch 32 taken 0 (throw)
        -:  125:		
        2:  126:		cin.clear();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  127:		cin.sync();
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  128:                getline(cin,ch);
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  129:
        -:  130:                try
        -:  131:                {
        2:  132:                        if(ch.length() != 1)
call    0 returned 2
branch  1 taken 0 (fallthrough)
branch  2 taken 2
        -:  133:                        {
    #####:  134:                                throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  135:                        }
        -:  136:                }
    =====:  137:                catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  138:                {
    =====:  139:                                cout<<"Enter a single digit only"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  140:                                system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  141:                                system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  142:                                continue;
    =====:  143:                }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  144:                try
        -:  145:                {
        2:  146:                        if(isblank(ch[0]))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        -:  147:                        {
    #####:  148:                                throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  149:                        }
        -:  150:                }
    =====:  151:                catch(string b)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  152:                {
    =====:  153:                        cout<<"choice cannot be blank"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  154:                        system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  155:                        system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  156:                        continue;
    =====:  157:                }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  158:
        -:  159:                try
        -:  160:                {
        2:  161:                        if(isalpha(ch[0]))
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 2
        -:  162:                        {
    #####:  163:                                throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  164:                        }
        -:  165:
        -:  166:
       2*:  167:			if(stoi(ch)<1 || stoi(ch)>5)
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 2 (fallthrough)
branch  4 taken 0
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 2
branch 10 taken 0 (fallthrough)
branch 11 taken 2
        -:  168:			{
    #####:  169:				cout<<"Invalid Input"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  170:			}
        -:  171:			else
        -:  172:			{
        2:  173:				if(stoi(ch) == 5)
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 1 (fallthrough)
branch  4 taken 1
        -:  174:				{
        -:  175:
        1:  176:					break;
        -:  177:				}
        1:  178:				p[stoi(ch)-1]();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        -:  179:			}
        -:  180:		}
    =====:  181:		catch(string ch)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  182:		{
    =====:  183:			cout<<"Invalid input! (only numbers are allowed)"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  184:		}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  185:
        -:  186:		}
        1:  187:	}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
        -:  188:	else
        -:  189:	{
    #####:  190:		string temp;
call    0 never executed
    #####:  191:		getline(cin,temp);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  192:	}
call    0 never executed
call    1 never executed
        1:  193:	system("clear");
call    0 returned 1
        -:  194:	//aut.clear();
        -:  195:	
        1:  196:}
        -:  197:
function _Z10login_pagev called 1 returned 100% blocks executed 27%
        1:  198:int login_page()
        -:  199:{
        1:  200:	string id;
call    0 returned 1
        1:  201:	string pass_wd;
call    0 returned 1
        1:  202:	int chance = 3;
        1:  203:	while(chance>0)
branch  0 taken 1
branch  1 taken 0 (fallthrough)
        -:  204:	{
        1:  205:	string trying = "a";
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  206:	system("clear");
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  207:	cout<<endl<<endl<<"*******************   Login Page  ********************"<<endl<<endl<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 1
branch 10 taken 1 (fallthrough)
branch 11 taken 0 (throw)
call   12 returned 1
branch 13 taken 1 (fallthrough)
branch 14 taken 0 (throw)
call   15 returned 1
branch 16 taken 1 (fallthrough)
branch 17 taken 0 (throw)
        1:  208:	cout<<"Enter your Admin ID : "<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  209:	cin>>id;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  210:	cout<<"Enter your password : "<<endl;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
        1:  211:	cin>>pass_wd;
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        -:  212:
        -:  213:	
       1*:  214:	for(Authenticate a : aut)
call    0 returned 1
call    1 returned 1
call    2 returned 1
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0 (throw)
call    6 never executed
call    7 returned 1
branch  8 taken 1
branch  9 taken 0 (fallthrough)
        -:  215:	{
        1:  216:		if(a.get_admin_id() == id)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        -:  217:		{
        1:  218:			if(a.get_password() == pass_wd)
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 1
call    4 returned 1
branch  5 taken 1 (fallthrough)
branch  6 taken 0
        -:  219:			{
        -:  220:			//	return EXIT_SUCCESS;
        1:  221:				return 1;
        -:  222:			}
        -:  223:		}
       1*:  224:	}
call    0 returned 1
branch  1 taken 0 (fallthrough)
branch  2 taken 1
call    3 never executed
        -:  225:	
    #####:  226:	cout<<endl<<"Invalid Admin ID or Password!"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:  227:
        -:  228:	 
        -:  229:
    #####:  230:	chance--;
    #####:  231:	if(chance == 0)
branch  0 never executed
branch  1 never executed
        -:  232:	{
    #####:  233:		cout<<endl<<"You have reached maximum number of tries!"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  234:		cout<<"Getting back to main menu!"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    #####:  235:		system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  236:		//return EXIT_FAILURE;
    #####:  237:		return 0;
        -:  238:	}
    #####:  239:	cout<<endl<<"Want to try again then press 1 : "<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
    #####:  240:		string temp;
call    0 never executed
    #####:  241:		getline(cin,temp);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  242:		
    #####:  243:		cin.clear();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  244:		cin.sync();
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  245:                getline(cin,trying);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  246:		
        -:  247:                try
        -:  248:                {
    #####:  249:                        if(trying.length() != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  250:                        {
    #####:  251:                                throw trying;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  252:                        }
        -:  253:                }
    =====:  254:                catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  255:                {
    =====:  256:				cout<<a.length()<<endl;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
    =====:  257:                                cout<<"Enter a single digit only"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  258:                                system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  259:                                system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  260:                                continue;
    =====:  261:                }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  262:                try
        -:  263:                {
    #####:  264:                        if(isblank(trying[0]))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  265:                        {
    #####:  266:                                throw trying;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  267:                        }
        -:  268:                }
    =====:  269:                catch(string b)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  270:                {
    =====:  271:                        cout<<"choice cannot be blank"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  272:                        system("read n");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  273:                        system("clear");
call    0 never executed
branch  1 never executed
branch  2 never executed
    =====:  274:                        continue;
    =====:  275:                }
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  276:
        -:  277:                try
        -:  278:                {
    #####:  279:                        if(isalpha(trying[0]))
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  280:                        {
    #####:  281:                                throw trying;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  282:                        }
        -:  283:
        -:  284:		}
    =====:  285:		catch(string ch)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  286:		{
    =====:  287:			cout<<"Invalid input! (Only number expected)"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
        -:  288:		
    =====:  289:		}
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
    #####:  290:		if (stoi(trying) != 1)
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
        -:  291:		{
        -:  292:			//return EXIT_FAILURE;
    #####:  293:			return 0;
        -:  294:		}
        -:  295:		
        -:  296:		//system("read n");
       1*:  297:	}
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
call    4 returned 1
branch  5 taken 0
branch  6 taken 1
branch  7 taken 0
call    8 never executed
call    9 never executed
        -:  298:	//return EXIT_FAILURE;
    #####:  299:	return 0;
        1:  300:}
call    0 returned 1
call    1 returned 1
call    2 never executed
call    3 never executed
        -:  301:
        -:  302:
        -:  303:
